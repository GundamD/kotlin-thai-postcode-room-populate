apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply 'maven-publish'  // 1. Apply plugin

ext {
    versionMajor = 1
    versionMinor = 0
    versionPatch = 0
    mGroupId = 'com.gundamd.thai_postcode_sdk'
    mArtifactId = "thai-postcode-sdk"
    mVersionCode = generateVersionCode()
    mVersionName = generateVersionName(versionMajor, versionMinor, versionPatch, libVersionCode)
    mLibraryName = "thai-postcode-sdk"
    mLibraryDescription = "thai-postcode-sdk"
}


def static generateVersionCode() {
    return (System.currentTimeMillis() / 1000).toInteger()
}

def static generateVersionName(versionMajor, versionMinor, versionPatch, versionCode) {
    String versionName = "${versionMajor}.${versionMinor}.${versionPatch}"
    return "${versionName}-${versionCode}"
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        versionCode mVersionCode
        versionName mVersionName

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation": "$projectDir/schemas".toString(),
                        "room.incremental"   : "true"
                ]
            }
        }

        // Database version that gets updated with import script
        buildConfigField "int", "ADDRESSES_DB_VERSION", ADDRESSES_DB_VERSION
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'

    // Room
    implementation 'androidx.room:room-runtime:2.2.5'
    kapt 'androidx.room:room-compiler:2.2.5'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}


// 3. Declare task for creation of android sources.
task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

// 4. Make configuration for publishing artifact.
afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                groupId mGroupId
                artifactId mArtifactId
                version mVersionName

                from components.release

                artifact androidSourcesJar

                pom {
                    name = mLibraryName
                    description = mLibraryDescription
                }
            }
        }

        // 5. Update repository details and credentials.
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/GundamD/test-publishing-github-package")
                credentials {
                    username = System.getenv("GPR_USER")
                    password = System.getenv("GPR_KEY")
                }
            }
        }
    }
}

// Assembling should be performed before publishing package
publish.dependsOn assemble
